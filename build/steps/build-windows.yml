parameters:
  name: ''            # in the form type_platform_host
  displayName: ''     # the human name
  vmImage: ''         # the VM image
  vmPool: ''         # the VM pool
  targetFolder: ''    # the bootstrapper target
  dependsOn: []       # the dependiencies
  preBuildSteps: []   # any steps to run before the build
  postBuildSteps: []  # any additional steps to run after the build
  slnPath : 'Xamarin.Forms.sln'
  csprojPath : 'Xamarin.Forms.Platform.UAP\Xamarin.Forms.Platform.UAP.csproj'
  msbuildExtraArguments : ''
  artifactsTargetFolder: '$(build.artifactstagingdirectory)'
  artifactsName: 'win_build'
  nunitTestAdapterFolder: 'packages/NUnitTestAdapter.AnyVersion/build/'
  nunitTestFolder: '$(build.sourcesdirectory)'
  includeUwp: 'true'
  includeAndroid: 'true'
  includeNonUwpAndNonAndroid: 'true'

jobs:
  - job: ${{ parameters.name }}
    workspace:
      clean: all
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: 120
    pool:
      name: ${{ parameters.vmImage }}
    dependsOn: ${{ parameters.dependsOn }}
    strategy:
      matrix:
        debug:
          BuildConfiguration:  'Debug'
        release:
          BuildConfiguration:  'Release'
    steps:
    - checkout: self
      clean: true
    - script: build.cmd -Target provision
      displayName: 'Cake Provision'
      condition: eq(variables['provisioningCake'], 'true')

    - task: xamops.azdevex.provisionator-task.provisionator@1
      displayName: 'Provisionator'
      condition: eq(variables['provisioning'], 'true')
      inputs:
        provisioning_script: ${{ parameters.provisionatorPath }}
        provisioning_extra_args: ${{ parameters.provisionator.extraArguments }}

    # - task: UseDotNet@2
    #   displayName: "Install .net core $(DOTNET_VERSION)"
    #   condition: ne(variables['DOTNET_VERSION'], '')
    #   inputs:
    #     version: $(DOTNET_VERSION)
    #     packageType: 'sdk'

    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet $(NUGET_VERSION)'
      condition: ne(variables['NUGET_VERSION'], '')
      inputs:
        versionSpec: $(NUGET_VERSION)

    - task: NuGetCommand@2
      displayName: 'NuGet restore ${{ parameters.slnPath }}'
      inputs:
        restoreSolution: ${{ parameters.slnPath }}

    - script: build.cmd -Target BuildForNuget -ScriptArgs '-configuration="$(BuildConfiguration)"','-Build_ArtifactStagingDirectory="$(Build.ArtifactStagingDirectory)"'
      name: winbuild
      displayName: 'Build Projects For Nuget'

    - task: VSTest@2
      displayName: 'Unit Tests'
      inputs:
        testAssemblyVer2: |
          **/bin/$(BuildConfiguration)/Xamarin.Forms.Core.UnitTests.dll
          **/bin/$(BuildConfiguration)/**/Xamarin.Forms.DualScreen.UnitTests.dll
          **/bin/$(BuildConfiguration)/Xamarin.Forms.Pages.UnitTests.dll
          **/bin/$(BuildConfiguration)/**/Xamarin.Forms.Xaml.UnitTests.dll
        searchFolder: ${{ parameters.nunitTestFolder }}
        codeCoverageEnabled: true
        testRunTitle: '$(BuildConfiguration)_UnitTests'
        configuration: '$(BuildConfiguration)'
        diagnosticsEnabled: true

    - task: CopyFiles@2
      displayName: 'Copy Files dlls'
      condition: eq(${{ parameters.includeNonUwpAndNonAndroid }}, 'true')
      inputs:
        Contents: |
          Stubs/**/bin/**/*.dll
          Microsoft.XamlStandard/bin/**/*.dll
          Microsoft.XamlStandard.Design/bin/**/*.dll
          Xamarin.Forms.Core/bin/**/*.dll
          Xamarin.Forms.Core/bin/**/*.pdb
          Xamarin.Forms.Core/bin/**/*.mdb
          Xamarin.Forms.Xaml/bin/**/*.dll
          Xamarin.Forms.Xaml/bin/**/*.pdb
          Xamarin.Forms.Xaml/bin/**/*.mdb
          Xamarin.Forms.Platform/bin/**/*.dll
          Xamarin.Forms.Build.Tasks/bin/**/*.dll
          Xamarin.Forms.Core.Design/bin/**/*.dll
          Xamarin.Forms.Xaml.Design/bin/**/*.dll
          Xamarin.Forms.Maps/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.iOS/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.iOS/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.iOS/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Material.iOS/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Material.iOS/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Material.iOS/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Material.Tizen/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Material.Tizen/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Material.Tizen/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Platform.MacOS/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.MacOS/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Maps/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps.iOS/bin/iPhoneSimulator/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps.MacOS/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Pages/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Pages/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Pages/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Pages.Azure/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Pages.Azure/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Pages.Azure/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Core.UnitTests/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Xaml.UnitTests/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Pages.UnitTests/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps.Tizen/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps.Tizen/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps.Tizen/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.Tizen/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.Tizen/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.Tizen/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Build.Tasks.Core/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Build.Tasks.Core/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Build.Tasks.Core/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps.WPF/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps.WPF/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps.WPF/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Maps.GTK/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps.GTK/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps.GTK/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.WPF/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.WPF/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Platform.WPF/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.GTK/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.GTK/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Platform.GTK/bin/$(BuildConfiguration)/**/*.pdb
          Microsoft.XamlStandard/bin/$(BuildConfiguration)/**/*.dll
          Microsoft.XamlStandard/bin/$(BuildConfiguration)/**/*.mdb
          Microsoft.XamlStandard/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.DualScreen.UnitTests/bin/$(BuildConfiguration)/**/*.dll
          **/*.binlog

        TargetFolder: ${{ parameters.artifactsTargetFolder }}

    - task: CopyFiles@2
      displayName: 'Copy UWP'
      condition: eq(${{ parameters.includeUwp }}, 'true')
      inputs:
        Contents: |
          Xamarin.Forms.Platform.UAP/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.UAP/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.UAP/bin/$(BuildConfiguration)/**/*.pri
          Xamarin.Forms.Platform.UAP/bin/$(BuildConfiguration)/**/*.xr.xml
          Xamarin.Forms.Platform.UAP/obj/$(BuildConfiguration)/**/*.xaml
          Xamarin.Forms.Platform.UAP/Properties/Xamarin.Forms.Platform.UAP.rd.xml
          Xamarin.Forms.Maps.UWP/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Maps.UWP/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Maps.UWP/bin/$(BuildConfiguration)/**/*.pri
          Xamarin.Forms.Maps.UWP/bin/$(BuildConfiguration)/**/*.xbf
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.DualScreen.UnitTests/bin/$(BuildConfiguration)/**/*.dll

        TargetFolder: ${{ parameters.artifactsTargetFolder }}

        
    - task: CopyFiles@2
      displayName: 'Copy Android Files dlls'
      condition: eq('${{ parameters.includeAndroid }}', true)
      inputs:
        Contents: |
          Stubs/**/bin/**/*.dll
          Xamarin.Forms.Platform.Android/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.Android/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.Android.FormsViewGroup/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.Android.FormsViewGroup/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Material.Android/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Material.Android/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Material.Android/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.Maps.Android/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.Android.AppLinks/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.Platform.Android.AppLinks/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.Platform.Android.AppLinks/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.dll
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.pdb
          Xamarin.Forms.DualScreen/bin/$(BuildConfiguration)/**/*.mdb
          Xamarin.Forms.DualScreen.UnitTests/bin/$(BuildConfiguration)/**/*.dll
          **/*.binlog

        TargetFolder: ${{ parameters.artifactsTargetFolder }}

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: ${{ parameters.artifactsName }}'
      condition: always()
      inputs:
        ArtifactName: ${{ parameters.artifactsName }}
